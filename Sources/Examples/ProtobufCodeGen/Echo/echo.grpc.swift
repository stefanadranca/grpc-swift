//// Copyright (c) 2015, Google Inc.
////
//// Licensed under the Apache License, Version 2.0 (the "License");
//// you may not use this file except in compliance with the License.
//// You may obtain a copy of the License at
////
////     http://www.apache.org/licenses/LICENSE-2.0
////
//// Unless required by applicable law or agreed to in writing, software
//// distributed under the License is distributed on an "AS IS" BASIS,
//// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//// See the License for the specific language governing permissions and
//// limitations under the License.
//
//// DO NOT EDIT.
//// swift-format-ignore-file
////
//// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
//// Source: echo.proto
////
//// For information on using the generated types, please see the documentation:
////   https://github.com/grpc/grpc-swift
//
//import GRPCCore
//import GRPCProtobuf
//
//public enum Echo {
//    public enum Echo {
//        public enum Method {
//            public enum Get {
//                public typealias Input = EchoRequest
//                public typealias Output = EchoResponse
//                public static let descriptor = MethodDescriptor(
//                    service: "echo.Echo",
//                    method: "Get"
//                )
//            }
//            public enum Expand {
//                public typealias Input = EchoRequest
//                public typealias Output = EchoResponse
//                public static let descriptor = MethodDescriptor(
//                    service: "echo.Echo",
//                    method: "Expand"
//                )
//            }
//            public enum Collect {
//                public typealias Input = EchoRequest
//                public typealias Output = EchoResponse
//                public static let descriptor = MethodDescriptor(
//                    service: "echo.Echo",
//                    method: "Collect"
//                )
//            }
//            public enum Update {
//                public typealias Input = EchoRequest
//                public typealias Output = EchoResponse
//                public static let descriptor = MethodDescriptor(
//                    service: "echo.Echo",
//                    method: "Update"
//                )
//            }
//            public static let descriptors: [MethodDescriptor] = [
//                Methods.Get.descriptor,
//                Methods.Expand.descriptor,
//                Methods.Collect.descriptor,
//                Methods.Update.descriptor
//            ]
//        }
//        public typealias StreamingServiceProtocol = Echo_EchoStreamingServiceProtocol
//        public typealias ServiceProtocol = Echo_EchoServiceProtocol
//        public typealias ClientProtocol = Echo_EchoClientProtocol
//        public typealias Client = Echo_EchoClient
//    }
//}
//
//@available(macOS 13.0, *)
//public protocol Echo_EchoStreamingServiceProtocol: GRPCCore.RegistrableRPCService {
//    /// Immediately returns an echo of a request.
//    func get(request: ServerRequest.Stream<Echo.Echo.Methods.Get.Input>) async throws -> ServerResponse.Stream<Echo.Echo.Methods.Get.Output>
//
//    /// Splits a request into words and returns each word in a stream of messages.
//    func expand(request: ServerRequest.Stream<Echo.Echo.Methods.Expand.Input>) async throws -> ServerResponse.Stream<Echo.Echo.Methods.Expand.Output>
//
//    /// Collects a stream of messages and returns them concatenated when the caller closes.
//    func collect(request: ServerRequest.Stream<Echo.Echo.Methods.Collect.Input>) async throws -> ServerResponse.Stream<Echo.Echo.Methods.Collect.Output>
//
//    /// Streams back messages as they are received in an input stream.
//    func update(request: ServerRequest.Stream<Echo.Echo.Methods.Update.Input>) async throws -> ServerResponse.Stream<Echo.Echo.Methods.Update.Output>
//}
//
///// Conformance to `GRPCCore.RegistrableRPCService`.
//extension Echo.Echo.StreamingServiceProtocol {
//  @available(macOS 13.0, *)
//  public func registerMethods(with router: inout GRPCCore.RPCRouter) {
//        router.registerHandler(
//            for: Echo.Echo.Methods.Get.descriptor,
//            deserializer: ProtobufDeserializer<Echo.Echo.Methods.Get.Input>(),
//            serializer: ProtobufSerializer<Echo.Echo.Methods.Get.Output>(),
//            handler: { request in
//                try await self.get(request: request)
//            }
//        )
//        router.registerHandler(
//            for: Echo.Echo.Methods.Expand.descriptor,
//            deserializer: ProtobufDeserializer<Echo.Echo.Methods.Expand.Input>(),
//            serializer: ProtobufSerializer<Echo.Echo.Methods.Expand.Output>(),
//            handler: { request in
//                try await self.expand(request: request)
//            }
//        )
//        router.registerHandler(
//            for: Echo.Echo.Methods.Collect.descriptor,
//            deserializer: ProtobufDeserializer<Echo.Echo.Methods.Collect.Input>(),
//            serializer: ProtobufSerializer<Echo.Echo.Methods.Collect.Output>(),
//            handler: { request in
//                try await self.collect(request: request)
//            }
//        )
//        router.registerHandler(
//            for: Echo.Echo.Methods.Update.descriptor,
//            deserializer: ProtobufDeserializer<Echo.Echo.Methods.Update.Input>(),
//            serializer: ProtobufSerializer<Echo.Echo.Methods.Update.Output>(),
//            handler: { request in
//                try await self.update(request: request)
//            }
//        )
//    }
//}
//
//public protocol Echo_EchoServiceProtocol: Echo.Echo.StreamingServiceProtocol {
//    /// Immediately returns an echo of a request.
//    func get(request: ServerRequest.Single<Echo.Echo.Methods.Get.Input>) async throws -> ServerResponse.Single<Echo.Echo.Methods.Get.Output>
//
//    /// Splits a request into words and returns each word in a stream of messages.
//    func expand(request: ServerRequest.Single<Echo.Echo.Methods.Expand.Input>) async throws -> ServerResponse.Stream<Echo.Echo.Methods.Expand.Output>
//
//    /// Collects a stream of messages and returns them concatenated when the caller closes.
//    func collect(request: ServerRequest.Stream<Echo.Echo.Methods.Collect.Input>) async throws -> ServerResponse.Single<Echo.Echo.Methods.Collect.Output>
//
//    /// Streams back messages as they are received in an input stream.
//    func update(request: ServerRequest.Stream<Echo.Echo.Methods.Update.Input>) async throws -> ServerResponse.Stream<Echo.Echo.Methods.Update.Output>
//}
//
///// Partial conformance to `Echo_EchoStreamingServiceProtocol`.
//extension Echo.Echo.ServiceProtocol {
//    public func get(request: ServerRequest.Stream<Echo.Echo.Methods.Get.Input>) async throws -> ServerResponse.Stream<Echo.Echo.Methods.Get.Output> {
//        let response = try await self.get(request: ServerRequest.Single(stream: request))
//        return ServerResponse.Stream(single: response)
//    }
//
//    public func expand(request: ServerRequest.Stream<Echo.Echo.Methods.Expand.Input>) async throws -> ServerResponse.Stream<Echo.Echo.Methods.Expand.Output> {
//        let response = try await self.expand(request: ServerRequest.Single(stream: request))
//        return response
//    }
//
//    public func collect(request: ServerRequest.Stream<Echo.Echo.Methods.Collect.Input>) async throws -> ServerResponse.Stream<Echo.Echo.Methods.Collect.Output> {
//        let response = try await self.collect(request: request)
//        return ServerResponse.Stream(single: response)
//    }
//}
//
//public protocol Echo_EchoClientProtocol: Sendable {
//    /// Immediately returns an echo of a request.
//    func get<R>(
//        request: ClientRequest.Single<Echo.Echo.Methods.Get.Input>,
//        serializer: some MessageSerializer<Echo.Echo.Methods.Get.Input>,
//        deserializer: some MessageDeserializer<Echo.Echo.Methods.Get.Output>,
//        _ body: @Sendable @escaping (ClientResponse.Single<Echo.Echo.Methods.Get.Output>) async throws -> R
//    ) async throws -> R where R: Sendable
//
//    /// Splits a request into words and returns each word in a stream of messages.
//    func expand<R>(
//        request: ClientRequest.Single<Echo.Echo.Methods.Expand.Input>,
//        serializer: some MessageSerializer<Echo.Echo.Methods.Expand.Input>,
//        deserializer: some MessageDeserializer<Echo.Echo.Methods.Expand.Output>,
//        _ body: @Sendable @escaping (ClientResponse.Stream<Echo.Echo.Methods.Expand.Output>) async throws -> R
//    ) async throws -> R where R: Sendable
//
//    /// Collects a stream of messages and returns them concatenated when the caller closes.
//    func collect<R>(
//        request: ClientRequest.Stream<Echo.Echo.Methods.Collect.Input>,
//        serializer: some MessageSerializer<Echo.Echo.Methods.Collect.Input>,
//        deserializer: some MessageDeserializer<Echo.Echo.Methods.Collect.Output>,
//        _ body: @Sendable @escaping (ClientResponse.Single<Echo.Echo.Methods.Collect.Output>) async throws -> R
//    ) async throws -> R where R: Sendable
//
//    /// Streams back messages as they are received in an input stream.
//    func update<R>(
//        request: ClientRequest.Stream<Echo.Echo.Methods.Update.Input>,
//        serializer: some MessageSerializer<Echo.Echo.Methods.Update.Input>,
//        deserializer: some MessageDeserializer<Echo.Echo.Methods.Update.Output>,
//        _ body: @Sendable @escaping (ClientResponse.Stream<Echo.Echo.Methods.Update.Output>) async throws -> R
//    ) async throws -> R where R: Sendable
//}
//
//extension Echo.Echo.ClientProtocol {
//    public func get<R>(
//        request: ClientRequest.Single<Echo.Echo.Methods.Get.Input>,
//        _ body: @Sendable @escaping (ClientResponse.Single<Echo.Echo.Methods.Get.Output>) async throws -> R
//    ) async throws -> R where R: Sendable {
//        try await self.get(
//            request: request,
//            serializer: ProtobufSerializer<Echo.Echo.Methods.Get.Input>(),
//            deserializer: ProtobufDeserializer<Echo.Echo.Methods.Get.Output>(),
//            body
//        )
//    }
//
//    public func expand<R>(
//        request: ClientRequest.Single<Echo.Echo.Methods.Expand.Input>,
//        _ body: @Sendable @escaping (ClientResponse.Stream<Echo.Echo.Methods.Expand.Output>) async throws -> R
//    ) async throws -> R where R: Sendable {
//        try await self.expand(
//            request: request,
//            serializer: ProtobufSerializer<Echo.Echo.Methods.Expand.Input>(),
//            deserializer: ProtobufDeserializer<Echo.Echo.Methods.Expand.Output>(),
//            body
//        )
//    }
//
//    public func collect<R>(
//        request: ClientRequest.Stream<Echo.Echo.Methods.Collect.Input>,
//        _ body: @Sendable @escaping (ClientResponse.Single<Echo.Echo.Methods.Collect.Output>) async throws -> R
//    ) async throws -> R where R: Sendable {
//        try await self.collect(
//            request: request,
//            serializer: ProtobufSerializer<Echo.Echo.Methods.Collect.Input>(),
//            deserializer: ProtobufDeserializer<Echo.Echo.Methods.Collect.Output>(),
//            body
//        )
//    }
//
//    public func update<R>(
//        request: ClientRequest.Stream<Echo.Echo.Methods.Update.Input>,
//        _ body: @Sendable @escaping (ClientResponse.Stream<Echo.Echo.Methods.Update.Output>) async throws -> R
//    ) async throws -> R where R: Sendable {
//        try await self.update(
//            request: request,
//            serializer: ProtobufSerializer<Echo.Echo.Methods.Update.Input>(),
//            deserializer: ProtobufDeserializer<Echo.Echo.Methods.Update.Output>(),
//            body
//        )
//    }
//}
//
//@available(macOS 13.0, *)
//public struct Echo_EchoClient: Echo.Echo.ClientProtocol {
//    private let client: GRPCCore.GRPCClient
//
//    public init(client: GRPCCore.GRPCClient) {
//        self.client = client
//    }
//
//    /// Immediately returns an echo of a request.
//    public func get<R>(
//        request: ClientRequest.Single<Echo.Echo.Methods.Get.Input>,
//        serializer: some MessageSerializer<Echo.Echo.Methods.Get.Input>,
//        deserializer: some MessageDeserializer<Echo.Echo.Methods.Get.Output>,
//        _ body: @Sendable @escaping (ClientResponse.Single<Echo.Echo.Methods.Get.Output>) async throws -> R
//    ) async throws -> R where R: Sendable {
//        try await self.client.unary(
//            request: request,
//            descriptor: Echo.Echo.Methods.Get.descriptor,
//            serializer: serializer,
//            deserializer: deserializer,
//            handler: body
//        )
//    }
//
//    /// Splits a request into words and returns each word in a stream of messages.
//    public func expand<R>(
//        request: ClientRequest.Single<Echo.Echo.Methods.Expand.Input>,
//        serializer: some MessageSerializer<Echo.Echo.Methods.Expand.Input>,
//        deserializer: some MessageDeserializer<Echo.Echo.Methods.Expand.Output>,
//        _ body: @Sendable @escaping (ClientResponse.Stream<Echo.Echo.Methods.Expand.Output>) async throws -> R
//    ) async throws -> R where R: Sendable {
//        try await self.client.serverStreaming(
//            request: request,
//            descriptor: Echo.Echo.Methods.Expand.descriptor,
//            serializer: serializer,
//            deserializer: deserializer,
//            handler: body
//        )
//    }
//
//    /// Collects a stream of messages and returns them concatenated when the caller closes.
//    public func collect<R>(
//        request: ClientRequest.Stream<Echo.Echo.Methods.Collect.Input>,
//        serializer: some MessageSerializer<Echo.Echo.Methods.Collect.Input>,
//        deserializer: some MessageDeserializer<Echo.Echo.Methods.Collect.Output>,
//        _ body: @Sendable @escaping (ClientResponse.Single<Echo.Echo.Methods.Collect.Output>) async throws -> R
//    ) async throws -> R where R: Sendable {
//        try await self.client.clientStreaming(
//            request: request,
//            descriptor: Echo.Echo.Methods.Collect.descriptor,
//            serializer: serializer,
//            deserializer: deserializer,
//            handler: body
//        )
//    }
//
//    /// Streams back messages as they are received in an input stream.
//    public func update<R>(
//        request: ClientRequest.Stream<Echo.Echo.Methods.Update.Input>,
//        serializer: some MessageSerializer<Echo.Echo.Methods.Update.Input>,
//        deserializer: some MessageDeserializer<Echo.Echo.Methods.Update.Output>,
//        _ body: @Sendable @escaping (ClientResponse.Stream<Echo.Echo.Methods.Update.Output>) async throws -> R
//    ) async throws -> R where R: Sendable {
//        try await self.client.bidirectionalStreaming(
//            request: request,
//            descriptor: Echo.Echo.Methods.Update.descriptor,
//            serializer: serializer,
//            deserializer: deserializer,
//            handler: body
//        )
//    }
//}
