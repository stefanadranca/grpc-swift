// Copyright (c) 2015, Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: echo.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

public enum Echo {
    public enum Echo {
        public enum Method {
            public enum Get {
                public typealias Input = Echo_EchoRequest
                public typealias Output = Echo_EchoResponse
                public static let descriptor = MethodDescriptor(
                    service: "echo.Echo",
                    method: "Get"
                )
            }
            public enum Expand {
                public typealias Input = Echo_EchoRequest
                public typealias Output = Echo_EchoResponse
                public static let descriptor = MethodDescriptor(
                    service: "echo.Echo",
                    method: "Expand"
                )
            }
            public enum Collect {
                public typealias Input = Echo_EchoRequest
                public typealias Output = Echo_EchoResponse
                public static let descriptor = MethodDescriptor(
                    service: "echo.Echo",
                    method: "Collect"
                )
            }
            public enum Update {
                public typealias Input = Echo_EchoRequest
                public typealias Output = Echo_EchoResponse
                public static let descriptor = MethodDescriptor(
                    service: "echo.Echo",
                    method: "Update"
                )
            }
            public static let descriptors: [MethodDescriptor] = [
                Get.descriptor,
                Expand.descriptor,
                Collect.descriptor,
                Update.descriptor
            ]
        }
        @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
        public typealias StreamingServiceProtocol = Echo_EchoStreamingServiceProtocol
        @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
        public typealias ServiceProtocol = Echo_EchoServiceProtocol
        @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
        public typealias ClientProtocol = Echo_EchoClientProtocol
        @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
        public typealias Client = Echo_EchoClient
    }
}

@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol Echo_EchoStreamingServiceProtocol: GRPCCore.RegistrableRPCService {
    /// Immediately returns an echo of a request.
    func get(request: ServerRequest.Stream<Echo.Echo.Method.Get.Input>) async throws -> ServerResponse.Stream<Echo.Echo.Method.Get.Output>
    
    /// Splits a request into words and returns each word in a stream of messages.
    func expand(request: ServerRequest.Stream<Echo.Echo.Method.Expand.Input>) async throws -> ServerResponse.Stream<Echo.Echo.Method.Expand.Output>
    
    /// Collects a stream of messages and returns them concatenated when the caller closes.
    func collect(request: ServerRequest.Stream<Echo.Echo.Method.Collect.Input>) async throws -> ServerResponse.Stream<Echo.Echo.Method.Collect.Output>
    
    /// Streams back messages as they are received in an input stream.
    func update(request: ServerRequest.Stream<Echo.Echo.Method.Update.Input>) async throws -> ServerResponse.Stream<Echo.Echo.Method.Update.Output>
}

/// Conformance to `GRPCCore.RegistrableRPCService`.
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Echo.Echo.StreamingServiceProtocol {
    @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
    public func registerMethods(with router: inout GRPCCore.RPCRouter) {
        router.registerHandler(
            forMethod: Echo.Echo.Method.Get.descriptor,
            deserializer: ProtobufDeserializer<Echo.Echo.Method.Get.Input>(),
            serializer: ProtobufSerializer<Echo.Echo.Method.Get.Output>(),
            handler: { request in
                try await self.get(request: request)
            }
        )
        router.registerHandler(
            forMethod: Echo.Echo.Method.Expand.descriptor,
            deserializer: ProtobufDeserializer<Echo.Echo.Method.Expand.Input>(),
            serializer: ProtobufSerializer<Echo.Echo.Method.Expand.Output>(),
            handler: { request in
                try await self.expand(request: request)
            }
        )
        router.registerHandler(
            forMethod: Echo.Echo.Method.Collect.descriptor,
            deserializer: ProtobufDeserializer<Echo.Echo.Method.Collect.Input>(),
            serializer: ProtobufSerializer<Echo.Echo.Method.Collect.Output>(),
            handler: { request in
                try await self.collect(request: request)
            }
        )
        router.registerHandler(
            forMethod: Echo.Echo.Method.Update.descriptor,
            deserializer: ProtobufDeserializer<Echo.Echo.Method.Update.Input>(),
            serializer: ProtobufSerializer<Echo.Echo.Method.Update.Output>(),
            handler: { request in
                try await self.update(request: request)
            }
        )
    }
}

@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol Echo_EchoServiceProtocol: Echo.Echo.StreamingServiceProtocol {
    /// Immediately returns an echo of a request.
    func get(request: ServerRequest.Single<Echo.Echo.Method.Get.Input>) async throws -> ServerResponse.Single<Echo.Echo.Method.Get.Output>
    
    /// Splits a request into words and returns each word in a stream of messages.
    func expand(request: ServerRequest.Single<Echo.Echo.Method.Expand.Input>) async throws -> ServerResponse.Stream<Echo.Echo.Method.Expand.Output>
    
    /// Collects a stream of messages and returns them concatenated when the caller closes.
    func collect(request: ServerRequest.Stream<Echo.Echo.Method.Collect.Input>) async throws -> ServerResponse.Single<Echo.Echo.Method.Collect.Output>
    
    /// Streams back messages as they are received in an input stream.
    func update(request: ServerRequest.Stream<Echo.Echo.Method.Update.Input>) async throws -> ServerResponse.Stream<Echo.Echo.Method.Update.Output>
}

/// Partial conformance to `Echo_EchoStreamingServiceProtocol`.
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Echo.Echo.ServiceProtocol {
    public func get(request: ServerRequest.Stream<Echo.Echo.Method.Get.Input>) async throws -> ServerResponse.Stream<Echo.Echo.Method.Get.Output> {
        let response = try await self.get(request: ServerRequest.Single(stream: request))
        return ServerResponse.Stream(single: response)
    }
    
    public func expand(request: ServerRequest.Stream<Echo.Echo.Method.Expand.Input>) async throws -> ServerResponse.Stream<Echo.Echo.Method.Expand.Output> {
        let response = try await self.expand(request: ServerRequest.Single(stream: request))
        return response
    }
    
    public func collect(request: ServerRequest.Stream<Echo.Echo.Method.Collect.Input>) async throws -> ServerResponse.Stream<Echo.Echo.Method.Collect.Output> {
        let response = try await self.collect(request: request)
        return ServerResponse.Stream(single: response)
    }
}

@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol Echo_EchoClientProtocol: Sendable {
    /// Immediately returns an echo of a request.
    func get<R>(
        request: ClientRequest.Single<Echo.Echo.Method.Get.Input>,
        serializer: some MessageSerializer<Echo.Echo.Method.Get.Input>,
        deserializer: some MessageDeserializer<Echo.Echo.Method.Get.Output>,
        _ body: @Sendable @escaping (ClientResponse.Single<Echo.Echo.Method.Get.Output>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Splits a request into words and returns each word in a stream of messages.
    func expand<R>(
        request: ClientRequest.Single<Echo.Echo.Method.Expand.Input>,
        serializer: some MessageSerializer<Echo.Echo.Method.Expand.Input>,
        deserializer: some MessageDeserializer<Echo.Echo.Method.Expand.Output>,
        _ body: @Sendable @escaping (ClientResponse.Stream<Echo.Echo.Method.Expand.Output>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Collects a stream of messages and returns them concatenated when the caller closes.
    func collect<R>(
        request: ClientRequest.Stream<Echo.Echo.Method.Collect.Input>,
        serializer: some MessageSerializer<Echo.Echo.Method.Collect.Input>,
        deserializer: some MessageDeserializer<Echo.Echo.Method.Collect.Output>,
        _ body: @Sendable @escaping (ClientResponse.Single<Echo.Echo.Method.Collect.Output>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Streams back messages as they are received in an input stream.
    func update<R>(
        request: ClientRequest.Stream<Echo.Echo.Method.Update.Input>,
        serializer: some MessageSerializer<Echo.Echo.Method.Update.Input>,
        deserializer: some MessageDeserializer<Echo.Echo.Method.Update.Output>,
        _ body: @Sendable @escaping (ClientResponse.Stream<Echo.Echo.Method.Update.Output>) async throws -> R
    ) async throws -> R where R: Sendable
}

@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Echo.Echo.ClientProtocol {
    public func get<R>(
        request: ClientRequest.Single<Echo.Echo.Method.Get.Input>,
        _ body: @Sendable @escaping (ClientResponse.Single<Echo.Echo.Method.Get.Output>) async throws -> R
    ) async throws -> R where R: Sendable {
        try await self.get(
            request: request,
            serializer: ProtobufSerializer<Echo.Echo.Method.Get.Input>(),
            deserializer: ProtobufDeserializer<Echo.Echo.Method.Get.Output>(),
            body
        )
    }
    
    public func expand<R>(
        request: ClientRequest.Single<Echo.Echo.Method.Expand.Input>,
        _ body: @Sendable @escaping (ClientResponse.Stream<Echo.Echo.Method.Expand.Output>) async throws -> R
    ) async throws -> R where R: Sendable {
        try await self.expand(
            request: request,
            serializer: ProtobufSerializer<Echo.Echo.Method.Expand.Input>(),
            deserializer: ProtobufDeserializer<Echo.Echo.Method.Expand.Output>(),
            body
        )
    }
    
    public func collect<R>(
        request: ClientRequest.Stream<Echo.Echo.Method.Collect.Input>,
        _ body: @Sendable @escaping (ClientResponse.Single<Echo.Echo.Method.Collect.Output>) async throws -> R
    ) async throws -> R where R: Sendable {
        try await self.collect(
            request: request,
            serializer: ProtobufSerializer<Echo.Echo.Method.Collect.Input>(),
            deserializer: ProtobufDeserializer<Echo.Echo.Method.Collect.Output>(),
            body
        )
    }
    
    public func update<R>(
        request: ClientRequest.Stream<Echo.Echo.Method.Update.Input>,
        _ body: @Sendable @escaping (ClientResponse.Stream<Echo.Echo.Method.Update.Output>) async throws -> R
    ) async throws -> R where R: Sendable {
        try await self.update(
            request: request,
            serializer: ProtobufSerializer<Echo.Echo.Method.Update.Input>(),
            deserializer: ProtobufDeserializer<Echo.Echo.Method.Update.Output>(),
            body
        )
    }
}

@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct Echo_EchoClient: Echo.Echo.ClientProtocol {
    private let client: GRPCCore.GRPCClient
    
    public init(client: GRPCCore.GRPCClient) {
        self.client = client
    }
    
    /// Immediately returns an echo of a request.
    public func get<R>(
        request: ClientRequest.Single<Echo.Echo.Method.Get.Input>,
        serializer: some MessageSerializer<Echo.Echo.Method.Get.Input>,
        deserializer: some MessageDeserializer<Echo.Echo.Method.Get.Output>,
        _ body: @Sendable @escaping (ClientResponse.Single<Echo.Echo.Method.Get.Output>) async throws -> R
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Echo.Echo.Method.Get.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            handler: body
        )
    }
    
    /// Splits a request into words and returns each word in a stream of messages.
    public func expand<R>(
        request: ClientRequest.Single<Echo.Echo.Method.Expand.Input>,
        serializer: some MessageSerializer<Echo.Echo.Method.Expand.Input>,
        deserializer: some MessageDeserializer<Echo.Echo.Method.Expand.Output>,
        _ body: @Sendable @escaping (ClientResponse.Stream<Echo.Echo.Method.Expand.Output>) async throws -> R
    ) async throws -> R where R: Sendable {
        try await self.client.serverStreaming(
            request: request,
            descriptor: Echo.Echo.Method.Expand.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            handler: body
        )
    }
    
    /// Collects a stream of messages and returns them concatenated when the caller closes.
    public func collect<R>(
        request: ClientRequest.Stream<Echo.Echo.Method.Collect.Input>,
        serializer: some MessageSerializer<Echo.Echo.Method.Collect.Input>,
        deserializer: some MessageDeserializer<Echo.Echo.Method.Collect.Output>,
        _ body: @Sendable @escaping (ClientResponse.Single<Echo.Echo.Method.Collect.Output>) async throws -> R
    ) async throws -> R where R: Sendable {
        try await self.client.clientStreaming(
            request: request,
            descriptor: Echo.Echo.Method.Collect.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            handler: body
        )
    }
    
    /// Streams back messages as they are received in an input stream.
    public func update<R>(
        request: ClientRequest.Stream<Echo.Echo.Method.Update.Input>,
        serializer: some MessageSerializer<Echo.Echo.Method.Update.Input>,
        deserializer: some MessageDeserializer<Echo.Echo.Method.Update.Output>,
        _ body: @Sendable @escaping (ClientResponse.Stream<Echo.Echo.Method.Update.Output>) async throws -> R
    ) async throws -> R where R: Sendable {
        try await self.client.bidirectionalStreaming(
            request: request,
            descriptor: Echo.Echo.Method.Update.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            handler: body
        )
    }
}